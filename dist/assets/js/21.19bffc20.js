(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{422:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("jetson nano 基础")])]),t._v(" "),a("h2",{attrs:{id:"_1-使用python控制jetson-nano-gpio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用python控制jetson-nano-gpio"}},[t._v("#")]),t._v(" 1.使用python控制jetson nano GPIO")]),t._v(" "),a("p",[t._v("jetpack自带有Jetson.GPIO库，无需用户自己安装")]),t._v(" "),a("p",[t._v("💖注意：不要强制卸载系统自带的GPIO库，否则会面临无法导入的报错")]),t._v(" "),a("h3",{attrs:{id:"_1-1导入gpio-mudule"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1导入gpio-mudule"}},[t._v("#")]),t._v(" 1.1导入GPIO mudule")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Jetson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GPIO "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" GPIO\n")])])]),a("h3",{attrs:{id:"_1-2pin引脚编号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2pin引脚编号"}},[t._v("#")]),t._v(" 1.2Pin引脚编号")]),t._v(" "),a("p",[t._v("一共有四种引脚编号,不同编码模式，正常来讲选BOARD即可")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setmode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BOARD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#or")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setmode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BCM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#or")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setmode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CVM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#or")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setmode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TEGRA_SOC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("检查你设置了那种模式，可以用如下代码：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getmode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://aniya.oss-cn-shanghai.aliyuncs.com/20190812174551977.png",alt:"20190812174551977"}})]),t._v(" "),a("h3",{attrs:{id:"_1-3警告消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3警告消息"}},[t._v("#")]),t._v(" 1.3警告消息")]),t._v(" "),a("p",[t._v("你设置和使用的GPIO可能已经被用来作为特定的外设，在这种情况下，Jetson GPIO库会警告你是否GPIO被用来设置成别的外设")]),t._v(" "),a("p",[t._v("你也可以用代码来消除这个警告")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setwarnings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-4设置输入输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4设置输入输出"}},[t._v("#")]),t._v(" 1.4设置输入输出")]),t._v(" "),a("p",[t._v("GPIO通道在使用之前必须被设置成input或者output，初始化通道为输入引脚，如下")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#通道是基于之前讨论过的编码模式来确定的")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("设置通道为输出模式，如下：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("也可以设置初始化引脚的电平")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("initial"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HIGH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("也可以一次设置多个GPIO通道")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("channels "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-5输入检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5输入检测"}},[t._v("#")]),t._v(" 1.5输入检测")]),t._v(" "),a("p",[t._v("读取某个GPIO通道，可以用：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-6设置通道电平"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6设置通道电平"}},[t._v("#")]),t._v(" 1.6设置通道电平")]),t._v(" "),a("p",[t._v("设置某个通道的电平：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("state可以为GPIO.LOW 或 GPIO.HIGH")]),t._v(" "),a("p",[t._v("同样的，你可以一次设置多个通道")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("channels "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or use tuples")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HIGH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or GPIO.LOW")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set first channel to LOW and rest to HIGH")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LOW"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HIGH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HIGH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-7清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7清除"}},[t._v("#")]),t._v(" 1.7清除")]),t._v(" "),a("p",[t._v("在程序的末尾，你最好清除各个通道，这样各个引脚都会被设置成默认模式。清除通道代码如下：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cleanup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果你不想清除所有通道，你可以清除单个或多个特定的通道")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cleanup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chan1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cleanup only chan1")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cleanup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("chan1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chan2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cleanup only chan1 and chan2")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cleanup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chan1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chan2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# does the same operation as previous statement")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-8jetson-board-信息和库版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-8jetson-board-信息和库版本"}},[t._v("#")]),t._v(" 1.8Jetson Board 信息和库版本")]),t._v(" "),a("p",[t._v("获得jetson module信息")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("JETSON_INFO\n")])])]),a("p",[t._v("他提供了一系列python字典信息：P1_REVISION, RAM, REVISION, TYPE, MANUFACTURER and PROCESSOR。字典里的值都是string类型🫡P1_REVISION除外，他是int类型")]),t._v(" "),a("p",[t._v("获得Jetson.GPIO库版本")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("VERSION\n")])])]),a("p",[t._v("它提供一个字符类型 X.Y.Z形式")]),t._v(" "),a("h3",{attrs:{id:"_1-8中断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-8中断"}},[t._v("#")]),t._v(" 1.8中断")]),t._v(" "),a("p",[t._v("该函数库提供了三种中断方式")]),t._v(" "),a("h5",{attrs:{id:"the-wait-for-edge-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-wait-for-edge-function"}},[t._v("#")]),t._v(" ==THE WAIT_FOR_EDGE() FUNCTION==")]),t._v(" "),a("p",[t._v("这个函数会发生阻塞，直到等到一个电平")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wait_for_edge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RISING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("第二个参数选择特定的电平可以是GPIO.RISING, GPIO.FALLING or GPIO.BOTH。如果你希望限定阻塞的时间，你也可以设置阻塞时间")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# timeout is in milliseconds")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wait_for_edge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RISING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这个函数返回该通道被检测到的电平，如果时间超出timeout发生，则返回None")]),t._v(" "),a("h5",{attrs:{id:"the-event-detected-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-event-detected-function"}},[t._v("#")]),t._v(" ==THE EVENT_DETECTED() FUNCTION==")]),t._v(" "),a("p",[t._v("此函数可用于定期检查自上次调用以来是否发生了事件。可以按如下方式设置和调用该函数：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set rising edge detection on the channel")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_event_detect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RISING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrun_other_code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("event_detected"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    do_something"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("和以前一样，你可以检测事件GPIO.RISING, GPIO.FALLING or GPIO.BOTH.")]),t._v(" "),a("h5",{attrs:{id:"a-callback-function-run-when-an-edge-is-detected"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-callback-function-run-when-an-edge-is-detected"}},[t._v("#")]),t._v(" ==A CALLBACK FUNCTION RUN WHEN AN EDGE IS DETECTED==")]),t._v(" "),a("p",[t._v("此功能可用于运行回调函数的第二个线程。因此，回调函数可以与主程序并发运行以响应边缘。此功能可以按如下方式使用：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# define callback function")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback_fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Callback called from channel %s"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# add rising edge detection")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_event_detect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RISING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("callback_fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果需要，还可以添加多个回调，如下所示：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback_one")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"First Callback"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback_two")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Second Callback"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_event_detect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RISING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_event_callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nGPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_event_callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("在这种情况下，两个回调是按顺序运行的，而不是同时运行的，因为只有线程运行所有回调函数。")]),t._v(" "),a("p",[t._v("为了通过将多个事件折叠为一个事件来防止对回调函数的多次调用，可以选择设置去抖动时间：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# bouncetime set in milliseconds\nGPIO.add_event_detect(channel, GPIO.RISING, callback=callback_fn,\nbouncetime=200)\n")])])]),a("p",[t._v("如果不再需要边缘检测，可以按如下方式将其删除：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remove_event_detect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-10检测gpio-通道功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-10检测gpio-通道功能"}},[t._v("#")]),t._v(" 1.10检测GPIO 通道功能")]),t._v(" "),a("p",[t._v("此功能允许您检查提供的 GPIO 通道的功能：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GPIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gpio_function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("The function returns either GPIO.IN or GPIO.OUT.")])])}),[],!1,null,null,null);a.default=e.exports}}]);