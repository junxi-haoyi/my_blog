(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{423:function(r,e,t){"use strict";t.r(e);var o=t(0),a=Object(o.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[r._v("ROS基本概念")])]),r._v(" "),e("h2",{attrs:{id:"_1-ros是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-ros是什么"}},[r._v("#")]),r._v(" 1.ROS是什么")]),r._v(" "),e("p",[r._v("ROS 是一个适用于机器人的开源的元操作系统。它提供了操作系统应有的服务，包括硬件抽象，底层设备控制，常用函数的实现，进程间消息传递，以及包管理。它也提供用于获取、编译、编写、和跨计算机运行代码所需的工具和库函数。在某些方面ROS相当于一种“机器人框架（robot frameworks）”类似的“机器人框架”有："),e("a",{attrs:{href:"http://playerstage.sf.net/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Player"),e("OutboundLink")],1),r._v("，"),e("a",{attrs:{href:"http://eris.liralab.it/yarp/",target:"_blank",rel:"noopener noreferrer"}},[r._v("YARP"),e("OutboundLink")],1),r._v("，"),e("a",{attrs:{href:"http://www.orocos.org/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Orocos"),e("OutboundLink")],1),r._v("，"),e("a",{attrs:{href:"http://carmen.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"}},[r._v("CARMEN"),e("OutboundLink")],1),r._v("，"),e("a",{attrs:{href:"http://orca-robotics.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Orca"),e("OutboundLink")],1),r._v("，"),e("a",{attrs:{href:"http://www.robots.ox.ac.uk/~pnewman/TheMOOS/index.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("MOOS"),e("OutboundLink")],1),r._v("和 "),e("a",{attrs:{href:"http://msdn.microsoft.com/en-us/robotics/default.aspx",target:"_blank",rel:"noopener noreferrer"}},[r._v("Microsoft Robotics Studio"),e("OutboundLink")],1),r._v("。")]),r._v(" "),e("p",[r._v("ROS 运行时的“蓝图”是一种基于ROS通信基础结构的松耦合点对点进程网络。ROS实现了几种不同的通信方式，包括基于同步RPC样式通信的"),e("a",{attrs:{href:"https://wiki.ros.org/Services",target:"_blank",rel:"noopener noreferrer"}},[r._v("服务（services）"),e("OutboundLink")],1),r._v("机制，基于异步流媒体数据的"),e("a",{attrs:{href:"https://wiki.ros.org/Topics",target:"_blank",rel:"noopener noreferrer"}},[r._v("话题（topics）"),e("OutboundLink")],1),r._v("机制以及用于数据存储的[参数服务器（Parameter Server）](https://wiki.ros.org/Parameter Server)。想更加深入的解释这些概念，请参见"),e("a",{attrs:{href:"https://wiki.ros.org/ROS/Concepts",target:"_blank",rel:"noopener noreferrer"}},[r._v("概念综述"),e("OutboundLink")],1),r._v("。")]),r._v(" "),e("p",[r._v("ROS并不是一个实时的框架，但ROS可以嵌入实时程序。Willow Garage的PR2机器人使用了一种叫做"),e("a",{attrs:{href:"https://wiki.ros.org/pr2_etherCAT",target:"_blank",rel:"noopener noreferrer"}},[r._v("pr2_etherCAT"),e("OutboundLink")],1),r._v("的系统来实时发送或接收ROS消息。ROS也可以"),e("a",{attrs:{href:"http://www.willowgarage.com/blog/2009/06/10/orocos-rtt-and-ros-integrated",target:"_blank",rel:"noopener noreferrer"}},[r._v("与Orocos实时工具包无缝集成"),e("OutboundLink")],1),r._v("。")]),r._v(" "),e("h2",{attrs:{id:"_2-目的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-目的"}},[r._v("#")]),r._v(" 2.目的")]),r._v(" "),e("p",[r._v("很多人都在问“ROS与其它机器人软件平台有什么不同？”这是一个很难解答的问题。因为ROS"),e("strong",[r._v("不是")]),r._v("一个集成了大多数功能或特征的框架。事实上，ROS 的主要目标是为机器人研究和开发提供代码"),e("strong",[r._v("复用")]),r._v("的支持。ROS是一个分布式的进程（也就是"),e("em",[r._v("节点")]),r._v("）框架，这些进程被封装在易于被分享和发布的"),e("em",[r._v("程序包")]),r._v("和"),e("em",[r._v("功能包集")]),r._v("中。ROS也支持一种类似于代码"),e("em",[r._v("储存库")]),r._v("的联合系统，这个系统也可以实现工程的协作及发布。这个设计可以使一个工程的开发和实现从文件系统到用户接口完全独立决策（不受ROS限制）。同时，所有的工程都可以被ROS的基础工具整合在一起。")]),r._v(" "),e("p",[r._v("为了支持分享和协作的主要目的，ROS框架也有其它几个目标：")]),r._v(" "),e("ul",[e("li",[r._v("小型化：ROS尽可能设计的很小 -- 我们不封装您的 main() 函数 -- 所以为ROS编写的代码可以轻松的在其它机器人软件平台上使用。 由此得出的必然结论是ROS可以轻松集成在其它机器人软件平台：ROS已经可以与OpenRAVE，Orocos和Player集成。")]),r._v(" "),e("li",[r._v("ROS不敏感库：ROS的首选开发模型都是用不依赖ROS的干净的库函数编写而成。")]),r._v(" "),e("li",[r._v("语言独立：ROS框架可以简单地使用任何的现代编程语言实现。我们已经实现了"),e("a",{attrs:{href:"https://wiki.ros.org/rospy",target:"_blank",rel:"noopener noreferrer"}},[r._v("Python版本"),e("OutboundLink")],1),r._v("，"),e("a",{attrs:{href:"https://wiki.ros.org/roscpp",target:"_blank",rel:"noopener noreferrer"}},[r._v("C++版本"),e("OutboundLink")],1),r._v("和 "),e("a",{attrs:{href:"https://wiki.ros.org/roslisp",target:"_blank",rel:"noopener noreferrer"}},[r._v("Lisp版本"),e("OutboundLink")],1),r._v("。同时，我们也拥有Java 和 Lua版本的实验库。")]),r._v(" "),e("li",[r._v("方便测试：ROS内建一个了叫做"),e("a",{attrs:{href:"https://wiki.ros.org/rostest",target:"_blank",rel:"noopener noreferrer"}},[r._v("rostest"),e("OutboundLink")],1),r._v("的单元/集成测试框架，可以轻松安装或卸载测试模块。")]),r._v(" "),e("li",[r._v("可扩展：ROS可以适用于大型运行时系统和大型开发进程。")])]),r._v(" "),e("p",[r._v("所以，“ROS与其它机器人软件平台有什么不同？”很难得到一个适用于所有情况的答案，但是，如果你选择使用其它机器人软件平台，我们希望你仍然可以使用到很多基于ROS发布的库函数。至于更多细节，这封Brian Gerkey（同时涉猎 Player 和 ROS）向ROS用户所写的关于ROS和Player区别的电子邮件（包括OpenCV 的集成）可以为我们提供一些比较：")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("这个问题的答案，和许多问题一样，视情况而定。特别是取悦于你想要干什么。Player非常适合简洁的非铰接的移动平台。它的设计为那些激光雷达的先锋提供了简单的传感器和电机操作方法。\n\n然而，ROS是围绕着基于驱动传感器（倾斜式激光，盘式/斜试头部传感器，机械臂传感器）的复杂移动处理平台设计的。与Player相比，ROS可以更方便的借助分布式计算设备，而且我可以肯定，越高级的应用越适用于ROS而不是Player。换句话说，Player提供了更多的硬件驱动，而ROS提供了更多算法。\n\n我认为，说ROS比Player更加灵活强大是公平的。但是，现实情况是，更加灵活强大意味着更加复杂。尽管我们很努力的使ROS更加简单易用，ROS仍然需要一个很长的学习过程。当然，熟悉Player会对学习ROS有很大帮助，因为它们很多基本的方面都是相似的。\n\n关于你们针对OpenCV集成提出的问题，我想你们会发现ROS集成OpenCV的代码要比Player多一点。未来，当ROS和OpenCV团队明显重叠时，你们会发现这种差异将变得更大。\n\n我发现ROS利用了大量的来自于Player工程的代码。ROS节点的代码重用了许多Player的驱动，而且Stage和Gazebo可在ROS社区中得到广泛的支持和良好的应用。\n")])])]),e("h2",{attrs:{id:"_3-操作系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-操作系统"}},[r._v("#")]),r._v(" 3.操作系统")]),r._v(" "),e("p",[r._v("ROS目前只能在基于Unix的平台上运行。ROS的软件主要在Ubuntu和Mac OS X 系统上测试，同时ROS社区仍持续支持Fedora，Gentoo，Arch Linux和其它Linux平台。")]),r._v(" "),e("p",[r._v("与此同时，Microsoft Windows端口的ROS已经实现，但并未完全开发完成。")]),r._v(" "),e("h2",{attrs:{id:"_4-发布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-发布"}},[r._v("#")]),r._v(" 4.发布")]),r._v(" "),e("p",[r._v("ROS核心系统及各种工具和库函数通常在"),e("a",{attrs:{href:"https://wiki.ros.org/Distributions",target:"_blank",rel:"noopener noreferrer"}},[r._v("ROS 发行版本"),e("OutboundLink")],1),r._v("中发布。ROS发行版本类似于Linux发行版本，并提供了一系列兼容此版本的可被使用或开发的软件。")])])}),[],!1,null,null,null);e.default=a.exports}}]);